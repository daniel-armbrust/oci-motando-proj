'''
Django settings for motando project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
'''

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment
APP_ENV = os.environ.get('APP_ENV')

# OCI
OCI_REGION = os.environ.get('OCI_REGION_ID')
OCI_BUCKET_NAMESPACE = os.environ.get('OCI_OBJSTR_NAMESPACE')
CLASSIFIEDAD_TMPIMG_BUCKET = os.environ.get('OCI_BUCKET_MOTANDO_IMGTMP')
CLASSIFIEDAD_IMG_BUCKET = os.environ.get('OCI_BUCKET_MOTANDO_IMG')
CLASSIFIEDAD_TASK_QUEUE_HOST = os.environ.get('CLASSIFIEDAD_TASK_QUEUE_HOST')
CLASSIFIEDAD_TASK_QUEUE_PORT = os.environ.get('CLASSIFIEDAD_TASK_QUEUE_PORT', 8100)
OCI_LOG_ID = os.environ.get('WEBAPP_LOG_ID')

# OCI ObjectStorage Amazon S3 Compatibility API
# https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/s3compatibleapi.htm
AWS_ACCESS_KEY_ID = os.environ.get('OCI_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('OCI_SECRET_ACCESS_KEY')
S3_REGION_NAME = OCI_REGION
AWS_S3_CUSTOM_DOMAIN = f'{OCI_BUCKET_NAMESPACE}.compat.objectstorage.{OCI_REGION}.oraclecloud.com'
AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

STATICFILES_BUCKET = os.environ.get('OCI_STATICFILES_BUCKET_NAME')
STATIC_URL = 'static/'
STATICFILES_STORAGE = 'storage.StaticFilesStorage'

STATICFILES_DIRS = [BASE_DIR / 'static/']

MEDIA_URL = '/media/'
MEDIA_ROOT = '%s/media' % (BASE_DIR,)

if APP_ENV == 'PRD':
    DEBUG = False
    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', None)
    #SESSION_COOKIE_DOMAIN = 'motando.com.br'
    #SESSION_COOKIE_SECURE = True
    #CSRF_COOKIE_DOMAIN = 'motando.com.br'    
    #CSRF_TRUSTED_ORIGINS = [CSRF_COOKIE_DOMAIN]
    #CSRF_COOKIE_SECURE = True
    #SECURE_SSL_REDIRECT = True      
else:
    from secrets import token_hex
    SECRET_KEY = token_hex(32)    
    OCI_CONFIG_FILE = '/opt/webapp/ocisecrt/config'
    CSRF_TRUSTED_ORIGINS = []
    DEBUG = True

ALLOWED_HOSTS = ['*']

# Session
SESSION_COOKIE_AGE = 3600
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_NAME = 'motandosess'
SESSION_COOKIE_PATH = '/'
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = False
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True
CSRF_COOKIE_AGE = 300
CSRF_COOKIE_NAME = 'motandocsrf'
CSRF_COOKIE_PATH = '/'
CSRF_COOKIE_SAMESITE = 'Lax'

# Application definition
INSTALLED_APPS = [
    #'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # 3rd party apps
    'rest_framework',
    'django_filters',

    # Local Apps
    'account.apps.AccountConfig',
    'motandoadm.apps.MotandoadmConfig',
    'home.apps.HomeConfig',
    'state_city.apps.StateCityConfig',
    'motorcycle.apps.MotorcycleConfig',
    'classifiedad.apps.ClassifiedadConfig',
    'chat.apps.ChatConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'motando.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'motando.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': os.environ.get('MYSQL_DBNAME'),
        'USER': os.environ.get('MYSQL_USER'),
        'PASSWORD': os.environ.get('MYSQL_PASSWD'),
        'HOST': os.environ.get('MYSQL_HOST'),
        'PORT': '3306',
        'OPTIONS': {
            'init_command': 'SET default_storage_engine=INNODB',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login / Logout
LOGIN_URL = 'account:login'
LOGOUT_URL = 'account:logout'
LOGOUT_REDIRECT_URL = 'home:main_page'

AUTH_USER_MODEL = 'account.User'

# DJANGO RestFramework
REST_FRAMEWORK = {    
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [        
        'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_FILTER_BACKENDS': [
         'django_filters.rest_framework.DjangoFilterBackend'
    ]
}

LOGGING = {    
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '{server_time} {levelname} - {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'oci.logging': {
            'level': 'INFO',
            'class': 'motando.ocilog.OciLogHandler',
            'formatter': 'django.server',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django': {
            #'handlers': ['console', 'oci.logging', 'mail_admins'],
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',        
        },
        'django.server': {
            #'handlers': ['console', 'oci.logging'],
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        }      
    },
}



